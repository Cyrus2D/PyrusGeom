from unittest import TestCase
from PyrusGeom.segment_2d import Segment2D
from PyrusGeom.vector_2d import Vector2D


class TestSegment2D(TestCase):
    def test_general(self):
        a = Vector2D(0, 1)
        b = Vector2D(10, 2)
        s = Segment2D(a, b)
        self.assertEqual(s.origin().x(), 0)
        self.assertEqual(s.origin().y(), 1)
        self.assertEqual(s.terminal().x(), 10)
        self.assertEqual(s.terminal().y(), 2)
        s = Segment2D(0, 1, 10, 2)
        self.assertEqual(s.origin().x(), 0)
        self.assertEqual(s.origin().y(), 1)
        self.assertEqual(s.terminal().x(), 10)
        self.assertEqual(s.terminal().y(), 2)
        s = Segment2D(a, 10, 0)
        self.assertEqual(s.origin().x(), 0)
        self.assertEqual(s.origin().y(), 1)
        self.assertEqual(s.terminal().x(), 10)
        self.assertEqual(s.terminal().y(), 1)

    def test_assign(self):
        a = Vector2D(0, 1)
        b = Vector2D(10, 2)
        s = Segment2D()
        s.assign(a, b)
        self.assertEqual(s.origin().x(), 0)
        self.assertEqual(s.origin().y(), 1)
        self.assertEqual(s.terminal().x(), 10)
        self.assertEqual(s.terminal().y(), 2)
        s = Segment2D()
        s.assign(a, b)
        self.assertEqual(s.origin().x(), 0)
        self.assertEqual(s.origin().y(), 1)
        self.assertEqual(s.terminal().x(), 10)
        self.assertEqual(s.terminal().y(), 2)
        s = Segment2D(a, 10, 0)
        s.assign(a, b)
        self.assertEqual(s.origin().x(), 0)
        self.assertEqual(s.origin().y(), 1)
        self.assertEqual(s.terminal().x(), 10)
        self.assertEqual(s.terminal().y(), 1)

    def test_is_valid(self):
        a = Vector2D(0, 1)
        b = Vector2D(0, 1)
        s = Segment2D(a, b)
        self.assertFalse(s.is_valid())

    def test_line(self):
        a = Vector2D(0, 1)
        b = Vector2D(0, 10)
        s = Segment2D(a, b)
        line = s.line()
        self.assertTrue(abs(line.a() + line.b()) < 0.01)

    def test_length(self):
        a = Vector2D(0, 1)
        b = Vector2D(0, 10)
        s = Segment2D(a, b)
        self.assertEqual(s.length(), 9)

    def test_direction(self):
        a = Vector2D(0, 1)
        b = Vector2D(0, 10)
        s = Segment2D(a, b)
        self.assertEqual(s.direction().degree(), 90)
        a = Vector2D(0, 1)
        b = Vector2D(0, -10)
        s = Segment2D(a, b)
        self.assertEqual(s.direction().degree(), -90)

    def test_swap(self):
        a = Vector2D(0, 1)
        b = Vector2D(0, 10)
        s = Segment2D(a, b).swap()
        self.assertEqual(s.direction().degree(), -90)
        self.assertEqual(s.origin().y(), 10)

    def test_reverse(self):
        a = Vector2D(0, 1)
        b = Vector2D(0, 10)
        s = Segment2D(a, b).reverse()
        self.assertEqual(s.direction().degree(), -90)
        self.assertEqual(s.origin().y(), 10)

    def test_reversed_segment(self):
        a = Vector2D(0, 1)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        s2 = s1.reversed_segment()
        self.assertEqual(s2.direction().degree(), -90)
        self.assertEqual(s2.origin().y(), 10)
        s1.assign(Vector2D(2, 2), Vector2D(5, 5))
        self.assertEqual(s2.direction().degree(), -90)
        self.assertEqual(s2.origin().y(), 10)

    def test_perpendicular_bisector(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s = Segment2D(a, b)
        p_line = s.perpendicular_bisector()
        self.assertEqual(p_line.get_y(0), 5)

    def test_contains(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s = Segment2D(a, b)
        self.assertTrue(s.contains(Vector2D(0, 5)))
        self.assertFalse(s.contains(Vector2D(-1, 5)))
        self.assertFalse(s.contains(Vector2D(0, 11)))

    def test_equals(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        s2 = Segment2D(a, b)
        s3 = Segment2D(Vector2D(0, 1), b)
        self.assertTrue(s1.equals(s2))
        self.assertFalse(s1.equals(s3))

    def test_equals_weakly(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        s2 = Segment2D(Vector2D(0.000000001, 0), b)
        self.assertTrue(s1.equals_weakly(s2))

    def test_projection(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        p = s1.projection(Vector2D(1, 5))
        self.assertEqual(p.x(), 0)
        self.assertEqual(p.y(), 5)
        p = s1.projection(Vector2D(0, 11))
        self.assertFalse(p.is_valid())
        a = Vector2D(0, 0)
        b = Vector2D(0, 0)
        s1 = Segment2D(a, b)
        p = s1.projection(Vector2D(1, 5))
        self.assertEqual(p.x(), 0)
        self.assertEqual(p.y(), 0)

    def test_intersection(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        a = Vector2D(10, 1)
        b = Vector2D(-10, 1)
        s2 = Segment2D(a, b)
        p = s1.intersection(s2)
        self.assertEqual(p.x(), 0)
        self.assertEqual(p.y(), 1)
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        s2 = Segment2D(a, b)
        p = s1.intersection(s2.line())
        self.assertEqual(p.x(), 0)
        self.assertEqual(p.y(), 1)
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        a = Vector2D(10, 12)
        b = Vector2D(-10, 12)
        s2 = Segment2D(a, b)
        p = s1.intersection(s2)
        self.assertEqual(p.is_valid(), False)
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        s2 = Segment2D(a, b)
        p = s1.intersection(s2.line())
        self.assertEqual(p.is_valid(), False)

    def test_exist_intersection(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        a = Vector2D(10, 1)
        b = Vector2D(-10, 1)
        s2 = Segment2D(a, b)
        self.assertTrue(s1.exist_intersection(s2))
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        s2 = Segment2D(a, b)
        self.assertTrue(s1.exist_intersection(s2))
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        a = Vector2D(10, 12)
        b = Vector2D(-10, 12)
        s2 = Segment2D(a, b)
        self.assertFalse(s1.exist_intersection(s2))
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        s2 = Segment2D(a, b)
        self.assertFalse(s1.exist_intersection(s2))

    def test_check_intersects_on_line(self):
        self.fail()

    def test_exist_intersection_except_endpoint(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        a = Vector2D(10, 1)
        b = Vector2D(-10, 1)
        s2 = Segment2D(a, b)
        self.assertTrue(s1.exist_intersection_except_endpoint(s2))
        a = Vector2D(10, 10)
        b = Vector2D(-10, 10)
        s2 = Segment2D(a, b)
        self.assertFalse(s1.exist_intersection_except_endpoint(s2))

    def test_intersects_except_endpoint(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        a = Vector2D(10, 1)
        b = Vector2D(-10, 1)
        s2 = Segment2D(a, b)
        self.assertTrue(s1.intersects_except_endpoint(s2))
        a = Vector2D(10, 10)
        b = Vector2D(-10, 10)
        s2 = Segment2D(a, b)
        self.assertFalse(s1.intersects_except_endpoint(s2))

    def test_nearest_point(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        p = s1.nearest_point(Vector2D(5, 12))
        self.assertEqual(p.x(), 0)
        self.assertEqual(p.y(), 10)
        p = s1.nearest_point(Vector2D(-5, -5))
        self.assertEqual(p.x(), 0)
        self.assertEqual(p.y(), 0)
        p = s1.nearest_point(Vector2D(3, 3))
        self.assertEqual(p.x(), 0)
        self.assertEqual(p.y(), 3)

    def test_dist(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        a = Vector2D(10, 1)
        b = Vector2D(-10, 1)
        s2 = Segment2D(a, b)
        self.assertEqual(s1.dist(s2), 0)
        a = Vector2D(10, -1)
        b = Vector2D(-10, -1)
        s2 = Segment2D(a, b)
        self.assertEqual(s1.dist(s2), 1)
        a = Vector2D(1, 0)
        b = Vector2D(1, 10)
        s2 = Segment2D(a, b)
        self.assertEqual(s1.dist(s2), 1)
        self.assertEqual(s1.dist(Vector2D(0, 5)), 0)
        self.assertEqual(s1.dist(Vector2D(0, 11)), 1)
        self.assertEqual(s1.dist(Vector2D(1, 5)), 1)

    def test_farthest_dist(self):
        a = Vector2D(0, 0)
        b = Vector2D(0, 10)
        s1 = Segment2D(a, b)
        self.assertEqual(s1.farthest_dist(Vector2D(0, -1)), 11)

    def test_on_segment(self):
        self.fail()

    def test_on_segment_weakly(self):
        self.fail()
